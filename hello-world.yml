---
#ddd:
#value_objects: Many objects have no conceptual identity.  These objects describe characteristics of a thing.
#entities:
#aggregates:
#root entities:

# >=> Link to an aggregate root entity
# >-> Link within an aggregate to a non-root entity
# -> parameters to a command
# ~> request body for a command
# => response body of a command
# |> Events persisted by a command

state:
aggregate:
resource:
requests:
responses:
commands:
queries:
events:

"""
[POSIX time](https://en.wikipedia.org/wiki/Unix_time)
"""
PosixTime: Int64 @UoM("posix")

Revision:
  logicalClock: Int!
  localTime: PosixTime @check(>=0) @default(date +%s)

Order: @aggregateRoot
  id: OrderId! @isUnique
  revision: Revision!
  lines: [OrderLine!]
OrderLine:
  id: OrderLineId! @isPartUnique
  productId: >=> Product.id
  price: Money!
  quantity: OrderQuantity

# Command
RepriceOrderLine: /api/orders/:id/order-lines/:lineId/price-modification
  -> Order.id
  -> OrderLine.id
  ~> RepricingRequest
  => OrderLineRepricingResponse
  |> OrderLineRepriced
  @invariant(newPrice < OrderLine.price * 0.10 unless managerOverride)

# invariants ?
RepricingRequest:
  newPrice: Money! @check(>=0) @UoM("microUSD")
  reason: RepricingRational!    # raison d'être
  managerOverride: Boolean @default(false)

RepricingRational:
  | Clearance
  | CustomerLoyaltyReward
  | DamagedGoods
  | OtherRepricingRational

OtherRepricingRational: String!

OrderLineRepricingResponse:
  | OrderLineRepricingAccepted
  | OrderLineRepricingSuccess
  | OrderLineRepricingDenied

OrderLineRepricingAccepted:
  httpStatus: HttpStatus!
  hal: HypertextApplicationLanguage!  # self link used to check status

OrderLineRepricingSuccess:
  httpStatus: HttpStatus!
  revision: Order.revision!
  hal: HypertextApplicationLanguage!

OrderLineRepricingDenied:
  httpStatus: HttpStatus!
  denialReasons: [DenialReason!]
  hal: HypertextApplicationLanguage!

DenialReason:
  reason: String  # may be a URL

HypertextApplicationLanguage:
  halLinks: [HalLink!]
  @invariant(must have self link)

HalLink:
  rel: String!
  href: String!
  deprecation: String
  name: String
  profile: String
  title: String
  hreflang: String
  `type`: String
  templated: Boolean @default(false)

OrderLineRepriced:
  orderId: Order.id!
  revision: Revision!
  orderLineId: OrderLine.id!
  price: Money!
  reason: RepricingRational!
  managerOverride: Boolean
  provenance: Provenance

Provenance:
  who: Who
  what: What
  when: When
  where: Where
  why: Why
  how: How

"Who was involved in the state change?"
Who:
  | ResponsibleHuman
  | AutomatedProcessManager

"What happened?"
What:
  events: [Event!]

"When did it happen?"
When:


"Where did the change take place?"
Where:

"Why did it happen?"
Why:

"How did it happen?"
How:



"""
1 Micro US Dollar (USD) = 1 millionth USD or $0.000001
Range of legal values: −9,223,372,036,854,775,807 to +9,223,372,036,854,775,807
"""
Money: Int64 @check(abs<=9,223,372,036,854,775,807) @UoM("microUSD")

# Query
GetOrder: /api/orders/:id?revision
  -> Order.id!
  ?  Revision.logicalClock
  => GetOrderResponse!

GetOrderResponse:
  | OrderResponse
  | ErrorResponse

OrderResponse:
  httpStatus: HttpStatus!
  order: Order!
  hal: HypertextApplicationLanguage!

# Use Oracle Flashback Query and just store JSON data
# When point in time is not specified current time is used
# and next and previous links will include it
GetAllOrders: /api/orders?limit&start&pointInTime
  ? ResultLimit
  & ResultStart
  & PointInTime
  => GetAllOrdersResponse!

GetAllOrdersResponse:
  | OrdersResponse
  | ErrorResponse

OrdersResponse:
  httpStatus: HttpStatus!
  orders: [Order!]
  hal: HypertextApplicationLanguage! # includes next and previous links


# Better? change the price of product "xyz" in my order to x. Does knowing the orderLineId provide value? Can the same product have multiple order lines? Maybe, if some items are damaged and have a lower price.
ChangeOrderLinePrice: Order -> Product.id -> Price -> Order
# Events

# Apply
OrderLinePriceChangedApply: state -> orderLinePriceChanged -> state
  {state|state.lines[x].price=updatedPrice when x.orderId=orderId}
HelloWorldCreatedEvent(helloWorldAggregate), state) => HelloWorldState(Some(helloWorldAggregate), HelloWorldStatus.ACTIVE, 1
HelloWorldReplacedEvent(helloWorldId, replacementHelloWorldResource, motivation), state) =>
            HelloWorldState(Some(HelloWorldAggregate(helloWorldId, replacementHelloWorldResource)), HelloWorldStatus.ACTIVE, 1

# Reference from one aggregate to a non-root entity in another aggregate

Abc:
  id: AbcId
  name: AbcName
  orderLines: [>=> AbcOrderLines!]   # maybe better to cache value objects from OrderLine references may not exist later?
    order: Order.id!
    line: OrderLine.id!



AbcName: String @check("")


/api/

-> --> >>=


metadata:
  name
  definition
  units of measure
  contraints
  datatype
  generic element / class word
  versioned vs. non-versioned
  nullability
  relationships
  defaults
  { references, POC }


scalar_types:
  HelloWorldId: String @check("[a-zA-Z0-9\-\.\_\~]{1,128}")
  Name: String @check("[a-zA-Z0-9\-\.\_\~]{1,128}")
  Description: String @check(".{1,2048}")
events:
  | HelloWorldCreated
  | HelloWorldDeleted
  | HelloWorldArchived
  | HelloWorldUnarchived
paths:
  | "/api/hello-worlds": createHelloWorld
  |
serviceCalls:
  | createHelloWorld: ServiceCall[CreateHelloWorldRequest, CreateHelloWorldResponse]
  | archiveHelloWorld(helloWorldId: UUID): ServiceCall[ArchiveHelloWorldRequest, ArchiveHelloWorldResponse]
  | getHelloWorld(helloWorldId: UUID): ServiceCall[NotUsed, GetHelloWorldResponse]
  | getAllHelloWorlds: ServiceCall[NotUsed, GetAllHelloWorldsResponse]
commands:
replies:
type: HelloWorld
  name: String!
  description: String
type: HelloWorldResource
  helloWorldId: HelloWorldId @isUnique @default(CUID)
  helloWorld: HelloWorld
type: HelloWorldAggregate
  helloWorldId: Uuid! @isUnique
  helloWorld: HelloWorld
# All commands include parameters for CorrelationId and SpanId
type: CreateHelloWorldCommand
type: CreateHelloWorldRequest
  helloWorldId: Uuid
  helloWorld: HelloWorld

# The purpose of the SpanId is to function as a distributed tracing span
# identifier. If it is missing the command generates a unique identifier.
# This identifier along with timestamps of
...


notes: Everything is either a value object or an entity. Persistent entity for commands and queries, they may then call the domain aggregate persistent entity. Everything in a different project allows each to scale differently. A smaller cluster also means quicker passivation. JWT fields and asymetric key encryption to provide a symetric key. Use Kafka for notification of revoked tokens. Log'out function.
scalar_types:
  HelloWorldId: String @check("[a-zA-Z0-9\-\.\_\~]{1,128}")
  Name: String @check("[a-zA-Z0-9\-\.\_\~]{1,128}")
  Description: String @check(".{1,2048}")
events:
  | HelloWorldCreated
  | HelloWorldDeleted
  | HelloWorldArchived
  | HelloWorldUnarchived
paths:
  | "/api/hello-worlds": createHelloWorld
  |
serviceCalls:
  | createHelloWorld: ServiceCall[CreateHelloWorldRequest, CreateHelloWorldResponse]
  | archiveHelloWorld(helloWorldId: UUID): ServiceCall[ArchiveHelloWorldRequest, ArchiveHelloWorldResponse]
  | getHelloWorld(helloWorldId: UUID): ServiceCall[NotUsed, GetHelloWorldResponse]
  | getAllHelloWorlds: ServiceCall[NotUsed, GetAllHelloWorldsResponse]
commands:
replies:
type: HelloWorld
  name: String!
  description: String
type: HelloWorldResource
  helloWorldId: HelloWorldId @isUnique @default(CUID)
  helloWorld: HelloWorld
type: HelloWorldAggregate
  helloWorldId: Uuid! @isUnique
  helloWorld: HelloWorld
# All commands include parameters for CorrelationId and SpanId
type: CreateHelloWorldCommand
type: CreateHelloWorldRequest
  helloWorldId: Uuid
  helloWorld: HelloWorld

# The purpose of the SpanId is to function as a distributed tracing span
# identifier. If it is missing the command generates a unique identifier.
# This identifier along with timestamps of
...